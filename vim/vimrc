" General setup
set nocompatible
set autoread

set rtp+=$DOTFILES/vim

" source all the helper files
  for f in split(glob('$DOTFILES/vim/helpers/**/*.vim'), '\n')
      exec 'source' f
  endfor

" adjust the behavior of backspace key in insert mode
set backspace=2
set iskeyword+=-

" Gui settings {{{
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
" Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

set number
set relativenumber
set wiw=115

set hlsearch
set incsearch
syntax on
colorscheme brisket

set guioptions-=r
set guioptions-=l

" wildmenu
set wildchar=<Tab> wildmenu wildmode=full

" Statusline {{{
set statusline=%f         " Path to the file
set statusline+=\ -\      " Separator
set statusline+=%y        " Filetype
set statusline+=%m
set statusline+=%=        " Switch to the right side
set statusline+=%c\ \     " Current column
set statusline+=\[%5l     " Current line
set statusline+=/         " Separator
set statusline+=%L\ \]    " Total lines
set laststatus=2
" }}}
" }}}

" Windows and Tabs {{{
set splitbelow
set splitright
" }}}

" Indentation {{{
set expandtab
set shiftwidth=2
set autoindent
set smartindent
" }}}

" Cursor style {{{
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)
" }}}

" Highlighting {{{
" show errors
" highlight Errors ctermbg=green guibg=darkred

" set current line highlight in active window
augroup CursorLineOnlyInActiveWindow
  autocmd!
  autocmd InsertEnter,InsertLeave * set cul!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END

" show info for the highlight group under the cursor
map <leader>hi :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
      \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
      \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
" }}}

" Search {{{
let grepprg='Ggrep'

command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number -- '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

command! -bang -nargs=* SSGGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number -- '.shellescape(expand("<cword>")), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

" }}}

" Copy Paste {{{
" shut off bracketed paste for system clipboard
set t_BE=
" }}}
"
"
